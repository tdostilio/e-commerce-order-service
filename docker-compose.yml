version: '3.8'

services:
  # MongoDB service for order data
  mongodb-orders:
    image: mongo:latest
    # Configure MongoDB as a replica set (required for transactions)
    command: ['--replSet', 'rs0_orders', '--bind_ip_all']
    ports:
      # Map container port 27017 to host port 27018
      - '27018:27017'
    volumes:
      # Persist data between container restarts
      - mongodb_orders_data:/data/db
    networks:
      - orders_network
      - message_broker_network

  # Initialize MongoDB replica set
  mongo-init-orders:
    image: mongo:latest
    depends_on:
      - mongodb-orders
    restart: on-failure
    # Run replica set initialization script
    command: >
      mongosh --host mongodb-orders:27017 --eval '
      rs.initiate({
        _id: "rs0_orders",
        members: [{ _id: 0, host: "localhost:27017" }]
      })
      '
    networks:
      - orders_network

  order-service:
    build: .
    ports:
      - '3001:3001'
    environment:
      - DATABASE_URL=mongodb://mongodb-orders:27017/orders?replicaSet=rs0_orders&directConnection=true
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - RABBITMQ_INVENTORY_QUEUE=inventory_queue
      - PORT=3001
    depends_on:
      - mongodb-orders
      - mongo-init-orders
    networks:
      - orders_network
      - message_broker_network

# Persistent storage for MongoDB data
volumes:
  mongodb_orders_data:

# Network configuration
networks:
  # Internal network for order service components
  orders_network:
    name: orders_network
  # External network for connecting to message broker
  # This network should be created separately and shared
  # between microservices
  message_broker_network:
    name: message_broker_network
    external: true
